version: '3.7'

#define docker volumes for container storage
volumes:
  certs:
  database:

#define internal docker networks for container connectivity
networks:
  frontend:
    driver: overlay
    attachable: true
  backend:
    external: false
  database:
    external: false

services:
  proxy:
      image: traefik:latest
      command: --docker \
        --docker.swarmmode \
        --docker.domain=traefik \
        --docker.watch \
        --defaultEntryPoints=http,https \
        --web \
        --web.metrics.prometheus \
        --entryPoints='Name:http Address::80' \
        --entryPoints='Name:admin Address::9090' \
        --entryPoints='Name:https Address::443 TLS' \
        --acme.httpchallenge.entrypoint=http \
        --acme.email=haooliveira@gmail.com \
        --acme.storage=/certs/acme.json \
        --acme.entryPoint=https \
        --acme.acmeLogging=true \
        --acme.ondemand=true \
        --acme.onhostrule=true
      networks:
        - frontend
      ports:
        - target: 80
          published: 80
          protocol: tcp
          mode: host
        - target: 443
          published: 443
          protocol: tcp
          mode: host
        - target: 3000
          published: 3000
          protocol: tcp
          mode: host
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - certs:/certs/
      deploy:
        replicas: 1
        update_config:
          parallelism: 1
          delay: 10s
        restart_policy:
          delay: 30s
          max_attempts: 10
        resources:
          limits:
            memory: 512M
  web:
    image: stone/web:testing
    networks:
     - frontend
     - backend
    ports:
     - 3000
    deploy:
      mode: replicated
      replicas: 4
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        delay: 30s
        max_attempts: 10
      resources:
        limits:
          memory: 256M
  api:
    image: stone/api:testing
    networks:
     - backend
     - database
    ports:
     - 3000
    environment:
      API_PORT: 3000
      DB_SECRET_DATA_ENV: pg_password
      DB_USER_DATA_ENV: pg_user
      DB_HOST_DATA_ENV: db
      DB_NAME_DATA_ENV: pg_database
      NODE_ENV: development
    secrets:
        - pg_password
        - pg_user
        - pg_database
    deploy:
      mode: replicated
      replicas: 4
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        delay: 30s
        max_attempts: 10
      resources:
        limits:
          memory: 256M

  db:
    image: postgres:11.2
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - database
    environment:
      POSTGRES_USER_FILE: /run/secrets/pg_user
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
      POSTGRES_DB_FILE: /run/secrets/pg_database
    secrets:
        - pg_password
        - pg_user
        - pg_database
    deploy:
      restart_policy:
        delay: 60s
        max_attempts: 5
      resources:
        limits:
          memory: 1G

secrets:
  pg_user:
    external: true
  pg_password:
    external: true
  pg_database:
    external: true
